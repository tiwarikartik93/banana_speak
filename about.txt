Read about HTTP methods: GET, POST, PUT, DELETE etc.


From now on I'll write everyting in here as yesterday I wrote stuff in notepad and I don't know how but mote then half the stuff is lost. 
So let's get started.

vanillajs is the js running in browser,

var txtInput = document.querySelector("#txt-input");
var outputDiv = document.querySelector("#output");
var btnTranslate = document.querySelector("#btn-translate");

var url = "https://api.funtranslations.com/translate/dothraki.json";

function urlGenerator(text)
{
    return url + "?text=" + text;
}

function handlingError()
{
    alert("server is down, please try after some time");
}

function clickHandler()
{
    fetch(urlGenerator(txtInput.value))
    .then(response => response.json())
    //.then(json => console.log(json))
    .then(json => {outputDiv.innerText = json.contents.translated})
    .catch(handlingError)
}

btnTranslate.addEventListener("click", clickHandler());

This object is called Document Object Model (DOM) as it models the entire HTML document in an object. And thus, to access those properties we use methods like document.querySelector().
Everything you do on a web page triggers an event. There are multiple events like onscroll onsubmit etc. and knowing about it will help you respond to user's needs. The more web dev you do, the more you'll know about these.
Good thing about these events is that you can plug your own callback or functionality in each of these and introduce custom behavior. Think of the animation shown when user starts scrolling.


first we are reprenting the required HTML element with js. Here, the whole HTML is considered as an document object (DOM) and here we are running a query for selecting the id "txt-input" and equate it to the js variable txtInput. remember that the querySelector selects the very first element for the provided criteria. We can use querySelectorAll if we want to select all elements having a specific class then we can access these individual elements as a list.

outputDiv.innerText: prints the text in the outputDiv.
txtInput.value: gives value that is in the txtInput.

btnTranslate.addEventListener("click", clickHandler());
whenever we perform the click operation on btnTranslate the clickHandler() will be executed.
what clickhandler() will do:
Fetch is built in all modern browsers and can be used to talk the servers. it will fetch the provided url then converts the response in understandable json then we can print the response that came from the server. However, here we are providing the only useful value that came from server to output box so that the converted text can be printed in this box. 

.then(response => response.json())
this is the short way to write a function
afunction(response)
{
  return response.json()
}

since it is a function the parameter can be named anything we want.


We have a JS app which takes user input, does processing and then shows an output! This is essentially what most apps do.
Think of posting a status on facebook. It takes your status via input box, you press post button and then it shows the posted status below in the newsfeed.
However, it does one thing more: making a call to server. Server is where you do heavy processing, it's the place where you can save your data. This is the reason when you post something from your laptop you (and others) can see it on their mobile i.e. other clients too.
This is called client server architecture in short. Client requests data, and or submits data. Server maintains data.


The call we are making is a GET call. It's used to get data from server We are using a mock API as the translation API is rate limited to 5 per hour.


<button onclick="clickHandler()" id = "btn-translate">Translate</button>
Note: your code ws not working without onclick.


you can use document.querySelectorAll(".notes") instead of querySelector but remember to use class (logic) and it will return an array.